import java.util.HashMap;
import java.util.Map;

public class FileSystemSizeCalculator {

    // Helper method to recursively calculate the size of files in a directory
    public static int calculateSize(Object node) {
        if (node instanceof Integer) {
            return (int) node;  // if it's a file, return its size
        }

        int totalSize = 0;
        Map<String, Object> directory = (Map<String, Object>) node;

        // Traverse all entries in the directory
        for (Object subNode : directory.values()) {
            totalSize += calculateSize(subNode);  // recursively add sizes
        }
        return totalSize;
    }

    // Main method to find the directory by path and calculate size
    public static String calculateTotalSize(Map<String, Object> fileSystem, String path) {
        String[] dirs = path.split("\\.");
        Map<String, Object> currentDir = fileSystem;

        // Traverse the directories according to the path
        for (String dir : dirs) {
            if (currentDir.containsKey(dir)) {
                currentDir = (Map<String, Object>) currentDir.get(dir);
            } else {
                return "Directory not found!";
            }
        }

        // Calculate the total size in the found directory
        int totalSize = calculateSize(currentDir);
        return "Total size: " + totalSize;
    }

    public static void main(String[] args) {
        // Sample file system in Java equivalent to the Python dictionary
        Map<String, Object> fileSystem = new HashMap<>();
        fileSystem.put("root", new HashMap<String, Object>() {{
            put("dir1", new HashMap<String, Object>() {{
                put("subdir1", new HashMap<String, Object>() {{
                    put("file1.txt", 100);
                    put("file2.txt", 200);
                    put("subsubdir1", new HashMap<String, Object>() {{
                        put("file3.txt", 50);
                        put("file4.txt", 150);
                        put("subsubsubdir1", new HashMap<String, Object>() {{
                            put("file5.txt", 500);
                            put("emptydir1", new HashMap<String, Object>());
                        }});
                    }});
                }});
                put("subdir2", new HashMap<String, Object>() {{
                    put("file6.txt", 300);
                    put("subsubdir2", new HashMap<String, Object>() {{
                        put("file7.txt", 700);
                        put("subsubsubdir2", new HashMap<String, Object>() {{
                            put("file8.txt", 800);
                            put("file9.txt", 900);
                        }});
                    }});
                    put("emptydir2", new HashMap<String, Object>());
                }});
                put("file10.txt", 1000);
            }});
            put("dir2", new HashMap<String, Object>() {{
                put("subdir3", new HashMap<String, Object>() {{
                    put("subsubdir3", new HashMap<String, Object>() {{
                        put("file11.txt", 400);
                        put("file12.txt", 500);
                    }});
                    put("subsubdir4", new HashMap<String, Object>() {{
                        put("emptydir3", new HashMap<String, Object>());
                    }});
                }});
                put("subdir4", new HashMap<String, Object>() {{
                    put("file13.txt", 600);
                    put("subsubdir5", new HashMap<String, Object>() {{
                        put("file14.txt", 700);
                        put("file15.txt", 800);
                        put("subsubsubdir3", new HashMap<String, Object>() {{
                            put("emptydir4", new HashMap<String, Object>());
                            put("file16.txt", 900);
                            put("file17.txt", 1000);
                        }});
                    }});
                }});
                put("emptydir5", new HashMap<String, Object>());
            }});
            put("dir3", new HashMap<String, Object>() {{
                put("file18.txt", 1100);
                put("subdir5", new HashMap<String, Object>() {{
                    put("subsubdir6", new HashMap<String, Object>() {{
                        put("file19.txt", 1200);
                        put("subsubsubdir4", new HashMap<String, Object>() {{
                            put("file20.txt", 1300);
                            put("emptydir6", new HashMap<String, Object>());
                        }});
                    }});
                }});
            }});
            put("emptydir7", new HashMap<String, Object>());
            put("file21.txt", 1400);
        }});

        // Test cases
        String path1 = "root.dir1";
        System.out.println(calculateTotalSize(fileSystem, path1));  // Expected Output: Total size: 500

        // String path2 = "root.dir2.subdir4.subsubdir5.subsubsubdir3";
        // System.out.println(calculateTotalSize(fileSystem, path2));  // Expected Output: Total size: 1900

        // String path3 = "root.dir3.subdir5.subsubdir6.subsubsubdir4";
        // System.out.println(calculateTotalSize(fileSystem, path3));  // Expected Output: Total size: 1300
    }
}